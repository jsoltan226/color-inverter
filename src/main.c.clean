#include <assert.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define CHANNEL_COUNT 3

void printUsage();
void printVersion();
void printInfo();
void invertInt8(uint8_t *x);
void hexStrToInt8(char x[2], uint8_t *dest);
void int8ToHexStr(uint8_t x, char dest[2]);
void invertHexStr(char x[2]);

uint8_t channels[CHANNEL_COUNT] = {};

char hexCharLUT[] = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };

int main(int argc, char **argv)
{
    if(argc < 2){
        fputs("Error: Argument count is below 1.\n", stderr);
        printUsage();
        return EXIT_FAILURE;
    } else if(argc == 2){
        char str[8] = "#000000";

        if(strcmp(argv[1], "-h") == 0 || strcmp(argv[1], "--help") == 0){
            printUsage();
            printInfo();
            return EXIT_SUCCESS;
        } else if(strcmp(argv[1], "-v") == 0 || strcmp(argv[1], "--version") == 0){
            printVersion();
            return EXIT_SUCCESS;
        } else if(argv[1][0] != '#'){
            fputs("Error: '#' not found at the beginning of the first argument.\n", stderr);
            printUsage();
            return EXIT_FAILURE;
        } else if(strlen(argv[1]) < 7){
            fputs("Error: length of the first argument is below 7.\n", stderr);
            printUsage();
            return EXIT_FAILURE;
        } else if(strlen(argv[1]) > 7){
            fputs("Warning: length of the first argument is greater than 7. Characters beyond no. 7 will be ignored.\n", stderr);
        }

        for(int i = 1; i < CHANNEL_COUNT * 2; i += 2){
            char buf[2] = { argv[1][i], argv[1][i + 1] };
            invertHexStr(buf);
            strncpy(&str[i], buf, 2);
        }
        fprintf(stdout, "%s\n", str);
    } else if(argc > CHANNEL_COUNT){
        for(int i = 0; i < CHANNEL_COUNT; i++){
            uint8_t value = atoi(argv[i + 1]);
            if(value < 0 || value > 255){
                printUsage();
                return EXIT_FAILURE;
            } else {
                invertInt8(&value);
                channels[i] = value;
            }
        }
        printf("%i %i %i\n", channels[0], channels[1], channels[2]);
    } else {
        fputs("Error: invalid number of arguments\n", stderr);
        printUsage();
        return EXIT_FAILURE;
    }
    
    return EXIT_SUCCESS;
}

void printUsage()
{
    printf("Usage:\n\tcolor-inverter <R> <G> <B>\n\t\tWhere R, G and B are values between 0 and 255\nOR\n\tcolor-inverter '#xxxxxx'\n\t\tWhere x is a hex digit (0-f), case insensitive\nOR\n\tcolor-inverter -h|--help to display this message\n\tcolor-inverter -v|--version to display the version\n");
}

void printVersion(){
    printf("RGB inverter v1.0\nMade by Jan So≈Çtan on Friday October 10th 2023 at 21:36.\n");
}

void printInfo(){
    printf("This is a simple program which will return an inverted version of a given RGB color value (subtract each channel from 255).\n");
}

void invertInt8(uint8_t *x)
{
    *x = 255 - *x;
}

void hexStrToInt8(char x[2], uint8_t *dest)
{
    *dest = 0;
    for(int i = 0; i < 2; i++){
        int shift = 4 - (i * 4);
        uint8_t value = 0;
        if(x[i] >= 48 && x[i] <= 57){
            value = x[i] - 48;
        } else if(x[i] >= 65 && x[i] <= 70){
            value = x[i] - 65 + 10;
        } else if(x[i] >= 97 && x[i] <= 102){
            value = x[i] - 97 + 10;
        }
        value <<= shift;
        *dest += value;
    }
}

void int8ToHexStr(uint8_t x, char dest[2])
{
    memset(dest, 0, 2);
    for(int i = 0; i < 2; i++){
        int shift = 4 - (i * 4);
        uint8_t mask = 15 << shift;
        dest[i] = hexCharLUT[(x & mask) >> shift];
    }
}

void invertHexStr(char s[2])
{
    uint8_t val;
    hexStrToInt8(s, &val);
    invertInt8(&val);
    int8ToHexStr(val, s);
}
